// Code generated by MockGen. DO NOT EDIT.
// Source: cars.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "gihub.com/gibiw/api-example/internal/entities"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// Mockrepository is a mock of repository interface.
type Mockrepository struct {
	ctrl     *gomock.Controller
	recorder *MockrepositoryMockRecorder
}

// MockrepositoryMockRecorder is the mock recorder for Mockrepository.
type MockrepositoryMockRecorder struct {
	mock *Mockrepository
}

// NewMockrepository creates a new mock instance.
func NewMockrepository(ctrl *gomock.Controller) *Mockrepository {
	mock := &Mockrepository{ctrl: ctrl}
	mock.recorder = &MockrepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrepository) EXPECT() *MockrepositoryMockRecorder {
	return m.recorder
}

// AddCar mocks base method.
func (m *Mockrepository) AddCar(ctx context.Context, car entities.Car) (entities.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCar", ctx, car)
	ret0, _ := ret[0].(entities.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCar indicates an expected call of AddCar.
func (mr *MockrepositoryMockRecorder) AddCar(ctx, car interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCar", reflect.TypeOf((*Mockrepository)(nil).AddCar), ctx, car)
}

// DeleteCarById mocks base method.
func (m *Mockrepository) DeleteCarById(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCarById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCarById indicates an expected call of DeleteCarById.
func (mr *MockrepositoryMockRecorder) DeleteCarById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCarById", reflect.TypeOf((*Mockrepository)(nil).DeleteCarById), ctx, id)
}

// GetCarById mocks base method.
func (m *Mockrepository) GetCarById(ctx context.Context, id uuid.UUID) (entities.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarById", ctx, id)
	ret0, _ := ret[0].(entities.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarById indicates an expected call of GetCarById.
func (mr *MockrepositoryMockRecorder) GetCarById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarById", reflect.TypeOf((*Mockrepository)(nil).GetCarById), ctx, id)
}

// GetCars mocks base method.
func (m *Mockrepository) GetCars(ctx context.Context) ([]entities.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCars", ctx)
	ret0, _ := ret[0].([]entities.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCars indicates an expected call of GetCars.
func (mr *MockrepositoryMockRecorder) GetCars(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCars", reflect.TypeOf((*Mockrepository)(nil).GetCars), ctx)
}

// UpdateCar mocks base method.
func (m *Mockrepository) UpdateCar(ctx context.Context, car entities.Car) (entities.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCar", ctx, car)
	ret0, _ := ret[0].(entities.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCar indicates an expected call of UpdateCar.
func (mr *MockrepositoryMockRecorder) UpdateCar(ctx, car interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCar", reflect.TypeOf((*Mockrepository)(nil).UpdateCar), ctx, car)
}
